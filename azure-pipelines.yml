trigger: none
pr: none

jobs:
- job: Linux
  pool:
    vmImage: ubuntu-16.04
  workspace:
    clean: all
  timeoutInMinutes: 80
  variables:
    BUILD_DIR: build/
    UPDATE_DIR: update/
  steps:
  - script: |
      hostname
      whoami
      cat /etc/*release
      lscpu
      free
      df -h
      pwd
      docker info
      docker version
    displayName: System info
  - script: |
      set -e
      # Process variables
      PIPELINE="${BUILD_SOURCEBRANCHNAME}"
      if [ "${APPID}" = 90 ]; then
          REPOSITORY="${REGISTRY_GOLDSOURCE}/${GAME}"
          GAME_ENGINE="hlds"
          GAME_BIN="hlds_linux"
      else
          REPOSITORY="${REGISTRY_SOURCE}/${GAME}"
          GAME_ENGINE="srcds"
          GAME_BIN="srcds_linux"
      fi
      echo "${REGISTRY_PASSWORD}" | docker login -u "${REGISTRY_USER}" --password-stdin
      # Set job-scoped variables
      echo "##vso[task.setvariable variable=PIPELINE]${PIPELINE}"
      echo "##vso[task.setvariable variable=REPOSITORY]${REPOSITORY}"
      echo "##vso[task.setvariable variable=GAME_ENGINE]${GAME_ENGINE}"
      echo "##vso[task.setvariable variable=GAME_BIN]${GAME_BIN}"
    env:
      REGISTRY_PASSWORD: $(REGISTRY_PASSWORD)
    displayName: Before script
  - script: |
      set -e
      # Build / Update the game image
      if [ "${PIPELINE}" = 'build' ]; then
          GAME_IMAGE="${REPOSITORY}:${GAME_VERSION}"
          if [ "${CACHE}" = 'true' ]; then
              date
              time docker pull "${GAME_IMAGE}" || true
          fi
          date
          time docker build \
              --cache-from "${GAME_IMAGE}" \
              --build-arg APPID="${APPID}" \
              --build-arg MOD="${MOD}" \
              --build-arg FIX_APPMANIFEST="${FIX_APPMANIFEST}" \
              --build-arg CLIENT_APPID="${CLIENT_APPID}" \
              -t "${GAME_IMAGE}" \
              --label "appid=${APPID}" \
              --label "mod=${MOD}" \
              --label "client_appid=${CLIENT_APPID}" \
              --label "game=${GAME}" \
              --label "game_version=${GAME_VERSION}" \
              --label "game_update_count=0" \
              --label "game_engine=${GAME_ENGINE}" \
              "${BUILD_DIR}"
          if [ "${LATEST}" = 'true' ]; then
              docker tag "${GAME_IMAGE}" "${REPOSITORY}:latest"
          fi
          date
      elif [ "${PIPELINE}" = 'update' ]; then
          GAME_IMAGE="${REPOSITORY}:latest"
          date
          time docker pull "${GAME_IMAGE}"
          date
          time docker build \
          --build-arg GAME_IMAGE="${GAME_IMAGE}" \
          -t "${GAME_IMAGE}" \
          --label "game_version=${GAME_VERSION}" \
          --label "game_update_count=${GAME_UPDATE_COUNT}" \
          "${UPDATE_DIR}"
          docker tag "${GAME_IMAGE}" "${REPOSITORY}:${GAME_VERSION}-layered"
          date
      fi
      docker images
      docker inspect "${GAME_IMAGE}"
      docker history "${GAME_IMAGE}"
      # Set job-scoped variables
      echo "##vso[task.setvariable variable=GAME_IMAGE]${GAME_IMAGE}"
    displayName: Build image
  - script: |
      set -e
      # Test the game image
      if [ ! "${NO_TEST}" = 'true' ]; then
          date
          time docker run \
              -t \
              --rm \
              "${GAME_IMAGE}" \
              "printenv && echo && ls -al && echo && exec ${GAME_BIN} -game ${GAME} +version +exit"
          echo; date
      fi
    displayName: Test image
  - script: |
      set -e
      # Push the game image
      if [ ! "${NO_PUSH}" = 'true' ]; then
          date
          time docker push "${REPOSITORY}"
          date
      fi
    displayName: Push image
  - script: |
      docker logout
    displayName: After script
    condition: always()
